# React Ruby Gym Platform CI/CD Pipeline
# This workflow deploys the full-stack application to AWS ECS using Terraform
# All AWS resources are automatically destroyed after testing to prevent costs

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

name: Deploy and Test React Ruby Gym Platform

jobs:
  deploy:
    name: Deploy Infrastructure and Application
    runs-on: ubuntu-latest
    environment: production
    outputs:
      application-url: ${{ steps.get-url.outputs.application-url }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Initialize Terraform
      run: |
        cd infrastructure
        terraform init

    - name: Plan Terraform Deployment
      run: |
        cd infrastructure
        terraform plan -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
                      -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                      -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
                      -var="database_password=gym-admin-pass" \
                      -var="database_username=gym_admin"

    - name: Apply Terraform Configuration
      run: |
        cd infrastructure
        terraform apply -auto-approve \
                       -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
                       -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                       -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
                       -var="database_password=gym-admin-pass" \
                       -var="database_username=gym_admin"

    - name: Get Application URL
      id: get-url
      run: |
        cd infrastructure
        APP_URL=$(terraform output -raw application_url)
        echo "application-url=$APP_URL" >> $GITHUB_OUTPUT
        echo "Application URL: $APP_URL"

    - name: Get ECR Repository URLs
      id: ecr-urls
      run: |
        cd infrastructure
        ECR_APP_URL=$(terraform output -raw ecr_repository_url_app)
        ECR_FRONTEND_URL=$(terraform output -raw ecr_repository_url_frontend)
        echo "ecr-app-url=$ECR_APP_URL" >> $GITHUB_OUTPUT
        echo "ecr-frontend-url=$ECR_FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Backend Image
      id: build-backend-image
      env:
        ECR_APP_URL: ${{ steps.ecr-urls.outputs.ecr-app-url }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_APP_URL:$IMAGE_TAG .
        docker push $ECR_APP_URL:$IMAGE_TAG
        echo "image=$ECR_APP_URL:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build and Push Frontend Image
      id: build-frontend-image
      env:
        ECR_FRONTEND_URL: ${{ steps.ecr-urls.outputs.ecr-frontend-url }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_FRONTEND_URL:$IMAGE_TAG .
        docker push $ECR_FRONTEND_URL:$IMAGE_TAG
        echo "image=$ECR_FRONTEND_URL:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS Services
      run: |
        # Get cluster and service names from Terraform outputs
        cd infrastructure
        CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
        
        # Update backend service with new image
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service gym-platform-backend-service \
          --force-new-deployment
        
        # Update frontend service with new image
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service gym-platform-frontend-service \
          --force-new-deployment

    - name: Wait for Services to Stabilize
      run: |
        cd infrastructure
        CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
        
        echo "Waiting for backend service to be stable..."
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services gym-platform-backend-service
        
        echo "Waiting for frontend service to be stable..."
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services gym-platform-frontend-service
        
        echo "All services are now stable and ready for testing"

  cleanup:
    name: Cleanup AWS Resources
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Initialize Terraform
      run: |
        cd infrastructure
        terraform init

    - name: Destroy AWS Resources
      run: |
        cd infrastructure
        echo "Destroying all AWS resources to prevent ongoing costs..."
        echo "This includes: VPC, ECS cluster, ECR repositories, RDS database, ALB, and all associated resources"
        
        # First attempt: Normal destroy
        echo "Attempting normal terraform destroy..."
        terraform destroy -auto-approve \
                         -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
                         -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                         -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
                         -var="database_password=gym-admin-pass" \
                         -var="database_username=gym_admin" || true
        
        # Second attempt: Force destroy with refresh
        echo "Attempting force destroy with refresh..."
        terraform refresh \
                         -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
                         -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                         -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
                         -var="database_password=gym-admin-pass" \
                         -var="database_username=gym_admin" || true
        
        terraform destroy -auto-approve \
                         -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
                         -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                         -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
                         -var="database_password=gym-admin-pass" \
                         -var="database_username=gym_admin" || true
        
        # Third attempt: Target specific resources that might be stuck
        echo "Attempting targeted destroy for remaining resources..."
        terraform destroy -auto-approve \
                         -target=aws_ecs_service.gym_platform_backend_service \
                         -target=aws_ecs_service.gym_platform_frontend_service \
                         -target=aws_lb.gym_platform_alb \
                         -target=aws_db_instance.gym_platform_db \
                         -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
                         -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                         -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
                         -var="database_password=gym-admin-pass" \
                         -var="database_username=gym_admin" || true
        
        # Final cleanup attempt
        echo "Final cleanup attempt..."
        terraform destroy -auto-approve \
                         -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
                         -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                         -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
                         -var="database_password=gym-admin-pass" \
                         -var="database_username=gym_admin" || true
        
        echo "Cleanup process completed. Check above for any remaining resources."

    - name: Manual Cleanup Fallback
      run: |
        echo "Performing manual cleanup of any remaining resources..."
        
        # Clean up ECS services
        echo "Cleaning up ECS services..."
        aws ecs list-services --cluster gym-platform-cluster --query 'serviceArns[]' --output text | \
        xargs -I {} aws ecs update-service --cluster gym-platform-cluster --service {} --desired-count 0 || true
        
        aws ecs list-services --cluster gym-platform-cluster --query 'serviceArns[]' --output text | \
        xargs -I {} aws ecs delete-service --cluster gym-platform-cluster --service {} || true
        
        # Clean up ECS cluster
        echo "Cleaning up ECS cluster..."
        aws ecs delete-cluster --cluster gym-platform-cluster || true
        
        # Clean up ECR repositories
        echo "Cleaning up ECR repositories..."
        aws ecr delete-repository --repository-name gym-platform-app --force || true
        aws ecr delete-repository --repository-name gym-platform-frontend --force || true
        
        # Clean up RDS instances
        echo "Cleaning up RDS instances..."
        aws rds delete-db-instance --db-instance-identifier gym-platform-db --skip-final-snapshot || true
        
        # Clean up Load Balancers
        echo "Cleaning up Load Balancers..."
        aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `gym-platform`)].LoadBalancerArn' --output text | \
        xargs -I {} aws elbv2 delete-load-balancer --load-balancer-arn {} || true
        
        # Clean up S3 buckets
        echo "Cleaning up S3 buckets..."
        aws s3 ls | grep gym-platform | awk '{print $3}' | xargs -I {} aws s3 rb s3://{} --force || true
        
        echo "Manual cleanup completed."

    - name: Workflow Summary
      run: |
        echo "CI/CD Pipeline completed successfully"
        echo "Infrastructure was deployed and tested"
        echo "All AWS resources have been cleaned up to prevent costs"
        echo "Check the logs above for detailed deployment information"
